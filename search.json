[{"title":"增加博客Push更新自动推送到TG频道(通过TG机器人)","url":"/2022/01/add-auto-push-service-to-tg/","content":"# 首先给大家说一声`新年好！`\n\n现在是新年第一天呢！\n\n第一天就开始折腾，真的累（\n\n~~做了两个小时做好之后才发现GitHub有官方TG机器人，裂了~~\n\n# 申请Telegram机器人\n\n首先，添加一个叫[Bot Father](https://t.me/BotFather)的机器人，他的基础信息如下\n\n![BotFather](/wp-content/uploads/2022/01/botFatherInfo.png)\n\n接着，依次在对话框内输入`/newbot`，Bot名字和Bot用户名\n>这里重点提醒：名字是显示在外边的名字，用户名就是加好友用的名字\n>\n>就像我下方的图片，第一条`/newbot`是发起创建机器人的请求\n>\n>第二条是设置用户名，这里我设置了HanHan's-Bot\n>\n>第三到六条都是错误的用户名示例（就是目害了）\n>\n>第七条是设置用户名成功\n\n最后，你就可以看到那一大段的提示机器人创建成功的消息，复制那一串token(红框部分)，那东西类似长这样子：`1234567890:AAAAA-AAAA_AA-AAAAAAAAAAAAAAAAAA_AA`\n\n![创建Bot](/wp-content/uploads/2022/01/createBotLog.png)\n接下来，前往你放博客的GitHub页面，转到`Settings`选项卡，再进入`Secrets`页面，单击`New repository secret`，如下方第一张图片的内容，再填入如下方第二张图片的内容，其中`Value`部分填写您的Telegram机器人Token。\n![准备填入TG Bot的Token](/wp-content/uploads/2022/01/goToGenSecret.png)\n![填入Token](/wp-content/uploads/2022/01/genSecret.png)\n接下来，前往你放博客的仓库，创建`.github/workflows/`文件夹，创建`PushTGBot.yml`（好记的文件名）就行，粘贴下面这段代码，其中`branches`（红框部分）应该填写成你每次提交时用的分支，就像下面的一张图片，然后Commit，Push，前往`Action`选项卡，如无意外，推送服务已经开始运行了\n```yaml\nname: Push TG Channel\non:\n  push:\n    branches:\n      - main\njobs:\n  Push:\n    runs-on: ubuntu-latest\n    if: github.event.repository.owner.id == github.event.sender.id\n    env: \n      botToken: ${{ secrets.TG_BOT_TOKEN }}\n    steps:\n      - name: Get Information & Push to Telegram Channel\n        run: |\n          commitMsg=`cat /home/runner/work/_temp/_github_workflow/event.json | jq -r '.commits[0].message'`\n          echo Commit message: $commitMsg\n          curl https://api.telegram.org/bot$botToken/sendMessage -XPOST -d 'chat_id=-1001638488826&text='$commitMsg''\n```\n![创建Workflow](/wp-content/uploads/2022/01/pasteScript.png)","tags":["开发"]},{"title":"PowerShell美化 - 今月份的水博客","url":"/2021/10/beautify-powershell/","content":"\n> 警告  \n> **本篇文章的实际操作环境为Windows 11+Windows Terminal+Powershell 7.1.4 不同版本可能会存在兼容性问题**\n\n## 1.安装模块\n\n首先，使用提升的权限启动PowerShell，然后键入如下指令安装美化模块\n\n```powershell\ninstall-module posh-git\ninstall-module oh-my-posh\n```\n\n> 在这一步操作时可能会发出如下提醒\n> \n> You are installing the modules from an untrusted repository. If you trust this repository, change its  \n> InstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure you want to install the modules from  \n> 'PSGallery'?  \n> \\[Y\\] Yes \\[A\\] Yes to All \\[N\\] No \\[L\\] No to All \\[S\\] Suspend \\[?\\] Help (default is \"N\"):\n\n输入A并回车以信任仓库。\n\n![](/wp-content/uploads/2021/08/installModule.png)\n\n## 2.启用模块\n\n```powershell\nimport-module posh-git\nimport-module oh-my-posh\nSet-PoshPrompt PowerLine\n```\n\n我听有人说这个得装GIT，不然会报错，请各位斟酌。\n\n最后一条是设置主题，我这边设置了PowerLine，全部主题可以看[这里](https://github.com/JanDeDobbeleer/oh-my-posh/tree/main/themes)。\n\n在输入上述代码块的最后一条命令后，您的终端样式应当会改变。\n\n![](/wp-content/uploads/2021/08/QQ截图20210825082303.png)\n\n>警告\n>部分字体可能会出现不兼容的情况导致部分乱码，如上图，我这里建议采用`Source Code Pro`字体。或者克隆[这个](https://github.com/powerline/fonts)仓库，并使用PowerShell运行`install.ps1`再选择后缀带`for Powerline`的字体，如下图\n\n\n![](/wp-content/uploads/2021/08/fonts.png)\n\n## 设置配置文件以在启动时自动应用主题\n\n输入`code $profile`，如果您没有安装VS Code并将其添加到PATH，请将`code`改为`notepad`或者你喜欢的文本编辑器。\n\n在文件任意处添加以下内容并保存。\n\n```powershell\nImport-Module posh-git\nImport-Module oh-my-posh\nSet-PoshPrompt PowerLine\n```\n\n![](/wp-content/uploads/2021/08/vsc.png)\n\n## 然后你的Powershell美化工作就做完了（","tags":["PowerShell","Windows"],"categories":["开发","日常"]},{"title":"博客迁移了吔","url":"/2021/09/blog-has-been-transfered/","content":"![](/wp-content/uploads/2021/09/transWHheadpic.png)\n如您所见，由于最近我受到了一次严重的DDoS攻击，正在尽量将我的服务进行转移，现在我已经将我的博客转为基于Hexo引擎，托管于Github Pages的静态页面。(其实是GH Pages被打也不会停机)\n\n![](/wp-content/uploads/2021/09/dos.webp)\n![](/wp-content/uploads/2021/09/newBlog.webp)","tags":["伪*Server运维","日常"],"categories":["伪*Server运维"]},{"title":"将WordPress迁移至Hexo","url":"/2021/09/transferWPtoHexo/","content":">警告\n\n>这篇文章没有任何图片，表述也较为简短晦涩\n# 1.迁移文章\n这里，我们借助一个Hexo的插件，您可以通过`npm i hexo-migrator-wordpress`来安装。\n\n在安装过程中，您可以登录WordPress的控制面板，在`侧边栏的工具->导出->所有内容->下载导出的文件`来获取数据。\n打开Powershell或命令提示符，然后来到您部署Hexo的目录，键入`hexo migrate wordpress 导出的文件路径`.\n# 2.迁移图片并精简\n下载您WordPress目录中的`wp-content\\uploads\\`文件夹放在`source\\wp-content\\uploads\\`文件夹内\n\n众所周知，在WordPress上传图片时，WordPress将生成多张图片，所以需要将目录下所有的带-**\\*\\*x\\*\\**的(例如-1024x775)的图片删除。\n# 3.批量修改图片链接\n紧接着，修改所有文件内的图片链接，建议使用带批量正则表达式查找替换的编辑器进行这一步骤，例如`VSCode`\n\n使用VSCode打开您部署Hexo的文件夹，然后在左侧导航栏选择第二个图标，在上方的输入框内输入`-1024x.{3,4}`，仔细检查下方结果无误后，点击第二个输入框右侧的**全部替换**，然后在上方的输入框内输入`-.{3,4}x1024`，然后重复上述步骤。\n\n最后，输入`-.{3,4}x.{3,4}`查看***MarkDown***文件内是否有遗漏的项目，然后替换。\n\n# 至此，您的WordPress已经迁移到Hexo了","tags":["迁移","WordPress","Hexo"]},{"title":"来自Microsoft的Linux！构建/安装CBL-Mariner","url":"/2021/09/cbl-mariner/","content":"\n# 前言\n\nCBL-Mariner(一下简称**CBL**)，由Microsoft编写的内部Linux发行版，网传基于Fedora。\n\n> 根据官方原话(Google翻译)：\n> \n> CBL-Mariner 是 Microsoft 云基础设施和边缘产品和服务的内部 Linux 发行版。CBL-Mariner 旨在为这些设备和服务提供一致的平台，并将增强 Microsoft 跟上 Linux 更新的能力。该计划是微软对各种 Linux 技术不断增加投资的一部分，例如SONiC、Azure Sphere OS和Windows Subsystem for Linux (WSL)。CBL-Mariner 正在公开共享，作为 Microsoft 对开源和回馈 Linux 社区的承诺的一部分。CBL-Mariner 不会改变我们对任何现有第三方 Linux 发行版产品的方法或承诺。  \n>   \n> CBL-Mariner 的设计理念是，一组小的通用核心包可以满足第一方云和边缘服务的普遍需求，同时允许各个团队在通用核心之上分层附加包，为他们的工作负载生成图像。这是通过一个简单的构建系统实现的，该系统支持：  \n>   \n> 包生成：这会从 SPEC 文件和源文件中生成所需的一组 RPM 包。  \n> 图像生成：这会从给定的一组包中生成所需的图像工件，如 ISO 或 VHD。  \n> 无论是部署为容器还是容器主机，CBL-Mariner 都消耗有限的磁盘和内存资源。CBL-Mariner 的轻量级特性还提供更快的启动时间和最小的攻击面。通过将核心映像中的功能集中在我们内部云客户需要的功能上，可以加载更少的服务和更少的攻击媒介。  \n>   \n> 当出现安全漏洞时，CBL-Mariner 支持基于包的更新模型和基于图像的更新模型。利用通用的RPM 包管理器系统，CBL-Mariner 提供最新的安全补丁和修复程序，以实现快速周转时间的目标。\n\n# 构建CBL-Mariner安装包(ISO)\n\n由于官方并没有提供预先构建用于安装的ISO映像文件，所以我们必须自行对其进行构建。\n\n>警告\n>由于中国大陆的网络连通性欠佳，不易构建，建议使用代理或者在[这里](https://ilovecpp-my.sharepoint.com/:u:/g/personal/admin_han-han_xyz/EZlzqTP6hhFMt_sd1wHDv_MBlzj6z1alkWrFVBOtapWdyQ)下载我已经构建完毕的安装映像。(构建日志见[文末](#extra))\n\n这里我们使用Ubuntu(Debian)作为示例，其他发行版亦可以用于构建（WSL除外），只需要安装构建所需的依赖包即可。\n\n## 安装用于构建的依赖包\n\n键入以下命令继续：\n\n```bash\nsudo apt install make tar unzip wget curl rpm qemu-utils golang-go genisoimage python2-minimal bison gawk\n```\n\n## 构建\n\n首先，从[这里](https://github.com/microsoft/CBL-Mariner/releases)下载最新版本的Source code，zip或tar.gz均可。\n\n然后解压缩，如果您下载的zip格式，则使用`unzip 文件名`，若使用tar.gz格式，则使用`tar xf 文件名`解压。\n\n然后键入`cd CBL*`回车，继续键入`cd toolkit`并回车进入工作目录。\n\n然后键入`make iso REBUILD_TOOLS=y REBUILD_PACKAGES=n CONFIG_FILE=./imageconfigs/full.json`，回车开始构建。\n\n构建完毕后，键入`cd ..`进入上级目录，随后键入`cd out/images/full/`以进入输出文件夹，键入`ls -a`理应看到类似`full-1.0.20210829.2214.iso`的文件名，这就是安装ISO映像，将其提取至你喜欢的未知。\n\n# 安装CBL-Mariner\n\n我们推荐您使用虚拟机进行尝试。\n\n首先，按照一般流程创建虚拟机并启动，在选择按照程序界面选择`Graphical Installer`并回车继续，等待其加载。\n\n![](/wp-content/uploads/2021/08/IIM42KBP9J0VGID4HO4.png)\n\n选择图形安装界面\n\n此时，您应该会看到如下界面\n\n![](/wp-content/uploads/2021/08/VTQJVYQOQC7UJ275Z3R.png)\n\n安装界面\n\n![](/wp-content/uploads/2021/08/TPSUVRPZ89TQER0@D3.png)\n\n正在安装\n\n![](/wp-content/uploads/2021/08/YYYY8J02WTAN6.png)\n\n安装完毕\n\n# 安装完成\n\n此时，重启开机，您便会看到类似如下界面(1-2行)，依次输入账号和密码并回车即可登录。\n\nCBL-Mariner此时并不完善，yum软件源里也没用很多常用的包，但我相信它一定会越做越好。\n\n![](/wp-content/uploads/2021/08/MD5DMJYM4RKKO_H45FT.png)\n\n# 附录\n\n<details>\n  <summary>我的构建日志</summary>\n```bash\nroot@hanhan:~# cd cbl/CBL-Mariner-1.0.20210819-1.0/\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0# ls\nbuild            CODE_OF_CONDUCT.md  LICENSE               out        SECURITY.md  SPECS-SIGNED  toolkit\ncgmanifest.json  CONTRIBUTING.md     LICENSES-AND-NOTICES  README.md  SPECS        SUPPORT.md\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0# ls build/\nimagegen            INTERMEDIATE_SRPMS  make_status    rpm_cache       toolchain  worker\nINTERMEDIATE_SPECS  logs                pkg_artifacts  SRPM_packaging  tools\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0# ls build/imagegen/\nfull  meta-user-data_tmp\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0# ls build/imagegen/full/\nimager_output  workspace\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0# ls build/imagegen/full/imager_output/\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0# cd toolkit/\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit# sudo apt install make tar wget curl rpm qemu-utils golang-go genisoimage python2-minimal bison gawk\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nbison is already the newest version (2:3.5.1+dfsg-1).\ngawk is already the newest version (1:5.0.1+dfsg-1).\ngenisoimage is already the newest version (9:1.1.11-3.1ubuntu1).\ngolang-go is already the newest version (2:1.13~1ubuntu2).\nmake is already the newest version (4.2.1-1.2).\nwget is already the newest version (1.20.3-1ubuntu1).\npython2-minimal is already the newest version (2.7.17-2ubuntu4).\nrpm is already the newest version (4.14.2.1+dfsg1-1build2).\ncurl is already the newest version (7.68.0-1ubuntu2.6).\nqemu-utils is already the newest version (1:4.2-3ubuntu6.17).\ntar is already the newest version (1.30+dfsg-7ubuntu0.20.04.1).\nThe following packages were automatically installed and are no longer required:\n  libllvm11 libxdamage1\nUse 'sudo apt autoremove' to remove them.\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit# make iso REBUILD_TOOLS=y REBUILD_PACKAGES=n CONFIG_FILE=./imageconfigs/full.json\nfatal: not a git repository (or any of the parent directories): .git\n/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools/imagepkgfetcher \\\n        --input=./imageconfigs/full.json \\\n        --base-dir=./imageconfigs/ \\\n        --log-level=info \\\n        --log-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/logs/imggen/imagepkgfetcher.log \\\n        --rpm-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/out/RPMS \\\n        --tmp-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/fetcher_tmp \\\n        --tdnf-worker=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/worker/worker_chroot.tar.gz \\\n        --tls-cert= \\\n        --tls-key= \\\n        --repo-file=\"/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/manifests/package/local.repo\"  --repo-file=\"/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/manifests/package/fetcher.repo\"  \\\n         --use-update-repo \\\n        --input-summary-file= \\\n        --output-summary-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/image_deps.json \\\n        --output-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/package_repo\nINFO[0000] Enabling update repo\nINFO[0000] Creating cloning environment to populate (/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/package_repo)\nINFO[0013] Initializing local RPM repository\nINFO[0014] Initializing repository configurations\nINFO[0014] Cloning: [hyperv-daemons:C:''V:'',C2:''V2:'' build-essential:C:''V:'',C2:''V2:'' cmake:C:''V:'',C2:''V2:'' createrepo_c:C:''V:'',C2:''V2:'' curl-devel:C:''V:'',C2:''V2:'' device-mapper:C:''V:'',C2:''V2:'' flex:C:''V:'',C2:''V2:'' fuse-devel:C:''V:'',C2:''V2:'' git:C:''V:'',C2:''V2:'' golang:C:''V:'',C2:''V2:'' iputils:C:''V:'',C2:''V2:'' less:C:''V:'',C2:''V2:'' linux-firmware:C:''V:'',C2:''V2:'' net-tools:C:''V:'',C2:''V2:'' ninja-build:C:''V:'',C2:''V2:'' parted:C:''V:'',C2:''V2:'' pciutils:C:''V:'',C2:''V2:'' python3-pip:C:''V:'',C2:''V2:'' tar:C:''V:'',C2:''V2:'' texinfo:C:''V:'',C2:''V2:'' usbutils:C:''V:'',C2:''V2:'' wget:C:''V:'',C2:''V2:'' qemu-kvm:C:''V:'',C2:''V2:'' qemu-img:C:''V:'',C2:''V2:'' shim:C:''V:'',C2:''V2:'' grub2-efi-binary:C:''V:'',C2:''V2:'' ca-certificates:C:''V:'',C2:''V2:'' cronie:C:''V:'',C2:''V2:'' logrotate:C:''V:'',C2:''V2:'' core-packages-base-image:C:''V:'',C2:''V2:'' initramfs:C:''V:'',C2:''V2:'' hyperv-daemons:C:''V:'',C2:''V2:'' shim:C:''V:'',C2:''V2:'' grub2-efi-binary:C:''V:'',C2:''V2:'' ca-certificates:C:''V:'',C2:''V2:'' cronie:C:''V:'',C2:''V2:'' logrotate:C:''V:'',C2:''V2:'' core-packages-base-image:C:''V:'',C2:''V2:'' initramfs:C:''V:'',C2:''V2:'' kernel:C:''V:'',C2:''V2:'' kernel:C:''V:'',C2:''V2:'' grub2-pc:C:''V:'',C2:''V2:'']\nINFO[0182] Configuring downloaded RPMs as a local repository\nINFO[0187] Saving cloned repository contents to (/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/image_deps.json)\n# Recursive make call to build the initrd image iso_initrd/iso-initrd.img\n# Called here instead of as a traditional dependency to make sure package builds are done sequentially for each config.\nmake image CONFIG_FILE=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json IMAGE_CACHE_SUMMARY= IMAGE_TAG= && \\\n/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools/isomaker \\\n        --base-dir ./imageconfigs/ \\\n        --build-dir /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/workspace \\\n        --initrd-path /root/cbl/CBL-Mariner-1.0.20210819-1.0/out/images/iso_initrd/iso-initrd.img \\\n        --input ./imageconfigs/full.json \\\n        --release-version 1.0.20210829.2214 \\\n        --resources /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources \\\n        --iso-repo /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/package_repo \\\n        --log-level=info \\\n        --log-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/logs/imggen/isomaker.log \\\n         \\\n        --output-dir /root/cbl/CBL-Mariner-1.0.20210819-1.0/out/images/full \\\n        --image-tag=\nmake[1]: Entering directory '/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit'\nfatal: not a git repository (or any of the parent directories): .git\nUpdated value of CONFIG_FILE (./imageconfigs/full.json -> /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json)\n/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools/imageconfigvalidator \\\n        --input=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json \\\n        --dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/ && \\\ntouch /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/make_status/validate-image-config-iso_initrd.flag\nINFO[0000] Reading configuration file (/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json)\n/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools/imagepkgfetcher \\\n        --input=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json \\\n        --base-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/ \\\n        --log-level=info \\\n        --log-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/logs/imggen/imagepkgfetcher.log \\\n        --rpm-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/out/RPMS \\\n        --tmp-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/fetcher_tmp \\\n        --tdnf-worker=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/worker/worker_chroot.tar.gz \\\n        --tls-cert= \\\n        --tls-key= \\\n        --repo-file=\"/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/manifests/package/local.repo\"  --repo-file=\"/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/manifests/package/fetcher.repo\"  \\\n         --use-update-repo \\\n        --input-summary-file= \\\n        --output-summary-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/image_deps.json \\\n        --output-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/package_repo\nINFO[0000] Enabling update repo\nINFO[0000] Creating cloning environment to populate (/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/package_repo)\nINFO[0012] Initializing local RPM repository\nINFO[0012] Initializing repository configurations\nINFO[0012] Cloning: [alsa-lib:C:''V:'',C2:''V2:'' alsa-utils:C:''V:'',C2:''V2:'' espeak-ng:C:''V:'',C2:''V2:'' espeakup:C:''V:'',C2:''V2:'' kernel-drivers-accessibility:C:''V:'',C2:''V2:'' kernel-drivers-sound:C:''V:'',C2:''V2:'' pcaudiolib:C:''V:'',C2:''V2:'' pam:C:''V:'',C2:''V2:'' attr:C:''V:'',C2:''V2:'' awk:C:''V:'',C2:''V2:'' bash:C:''V:'',C2:''V2:'' bzip2:C:''V:'',C2:''V2:'' calamares:C:''V:'',C2:''V2:'' cifs-utils:C:''V:'',C2:''V2:'' coreutils:C:''V:'',C2:''V2:'' cpio:C:''V:'',C2:''V2:'' cracklib:C:''V:'',C2:''V2:'' cracklib-dicts:C:''V:'',C2:''V2:'' cryptsetup:C:''V:'',C2:''V2:'' curl:C:''V:'',C2:''V2:'' dbus:C:''V:'',C2:''V2:'' dosfstools:C:''V:'',C2:''V2:'' dracut:C:''V:'',C2:''V2:'' e2fsprogs:C:''V:'',C2:''V2:'' efibootmgr:C:''V:'',C2:''V2:'' efivar:C:''V:'',C2:''V2:'' expat:C:''V:'',C2:''V2:'' file:C:''V:'',C2:''V2:'' filesystem:C:''V:'',C2:''V2:'' findutils:C:''V:'',C2:''V2:'' glib:C:''V:'',C2:''V2:'' glibc:C:''V:'',C2:''V2:'' gmp:C:''V:'',C2:''V2:'' gptfdisk:C:''V:'',C2:''V2:'' grep:C:''V:'',C2:''V2:'' grub2-efi:C:''V:'',C2:''V2:'' grub2-efi-binary:C:''V:'',C2:''V2:'' grub2-pc:C:''V:'',C2:''V2:'' gzip:C:''V:'',C2:''V2:'' haveged:C:''V:'',C2:''V2:'' iputils:C:''V:'',C2:''V2:'' less:C:''V:'',C2:''V2:'' libcap:C:''V:'',C2:''V2:'' libgcc:C:''V:'',C2:''V2:'' libstdc++:C:''V:'',C2:''V2:'' lvm2:C:''V:'',C2:''V2:'' lua:C:''V:'',C2:''V2:'' lz4:C:''V:'',C2:''V2:'' ncurses:C:''V:'',C2:''V2:'' ncurses-term:C:''V:'',C2:''V2:'' net-tools:C:''V:'',C2:''V2:'' nspr:C:''V:'',C2:''V2:'' nss:C:''V:'',C2:''V2:'' openssl:C:''V:'',C2:''V2:'' mariner-release:C:''V:'',C2:''V2:'' parted:C:''V:'',C2:''V2:'' pciutils:C:''V:'',C2:''V2:'' pcre:C:''V:'',C2:''V2:'' pkg-config:C:''V:'',C2:''V2:'' popt:C:''V:'',C2:''V2:'' readline:C:''V:'',C2:''V2:'' rpm:C:''V:'',C2:''V2:'' sed:C:''V:'',C2:''V2:'' shadow-utils:C:''V:'',C2:''V2:'' shim:C:''V:'',C2:''V2:'' sqlite:C:''V:'',C2:''V2:'' systemd:C:''V:'',C2:''V2:'' tar:C:''V:'',C2:''V2:'' tdnf:C:''V:'',C2:''V2:'' usbutils:C:''V:'',C2:''V2:'' util-linux:C:''V:'',C2:''V2:'' veritysetup:C:''V:'',C2:''V2:'' vim:C:''V:'',C2:''V2:'' words:C:''V:'',C2:''V2:'' xz:C:''V:'',C2:''V2:'' zlib:C:''V:'',C2:''V2:'' kernel:C:''V:'',C2:''V2:'' grub2-pc:C:''V:'',C2:''V2:'']\nINFO[0177] Configuring downloaded RPMs as a local repository\nINFO[0179] Saving cloned repository contents to (/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/image_deps.json)\nmkdir -p /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/imager_output && \\\nrm -rf /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/imager_output/* && \\\n/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools/imager \\\n        --build-dir /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/workspace \\\n        --input /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json \\\n        --base-dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/ \\\n        --log-level=info \\\n        --log-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/logs/imggen/imager.log \\\n        --local-repo /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/package_repo \\\n        --tdnf-worker /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/worker/worker_chroot.tar.gz \\\n        --repo-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/manifests/image/local.repo \\\n        --assets /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/assets/ \\\n        --output-dir /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/imager_output && \\\ntouch /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/make_status/imager_disk_output.flag\nINFO[0000] Building system configuration (ISO initrd)\nINFO[0000] Creating rootfs\nINFO[0000] Rootfs is including a kernel (kernel)\nINFO[0011] HidepidDisabled is false.\nWARN[0013] using empty dict to provide pw_dict\nWARN[0016] warning: /installroot/mariner-release-1.0-21.cm1.noarch.rpm: Header V4 RSA/SHA256 Signature, key ID 3135ce90: NOKEY\nWARN[0033] alsactl: init:1759: No soundcards found...\nWARN[0033] alsactl: save_state:1595: No soundcards found...\nWARN[0037] using empty dict to provide pw_dict\nWARN[0038] Package kernel-drivers-accessibility is already installed.\nWARN[0038] Nothing to do.\nWARN[0038] Package kernel-drivers-sound is already installed.\nWARN[0038] Nothing to do.\nWARN[0039] Package pcaudiolib is already installed.\nWARN[0039] Nothing to do.\nWARN[0039] Package pam is already installed.\nWARN[0039] Nothing to do.\nWARN[0039] Package bash is already installed.\nWARN[0039] Nothing to do.\nWARN[0049] switching pw_dict to cracklib-dicts\nWARN[0049] Package coreutils is already installed.\nWARN[0049] Nothing to do.\nWARN[0050] Package cracklib is already installed.\nWARN[0050] Nothing to do.\nWARN[0050] Package cracklib-dicts is already installed.\nWARN[0050] Nothing to do.\nWARN[0051] Package dbus is already installed.\nWARN[0051] Nothing to do.\nWARN[0051] Package e2fsprogs is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package efibootmgr is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package efivar is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package expat is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package filesystem is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package findutils is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package glib is already installed.\nWARN[0052] Nothing to do.\nWARN[0052] Package glibc is already installed.\nWARN[0052] Nothing to do.\nWARN[0053] Package gmp is already installed.\nWARN[0053] Nothing to do.\nWARN[0053] Package grep is already installed.\nWARN[0053] Nothing to do.\nWARN[0056] Package libcap is already installed.\nWARN[0056] Nothing to do.\nWARN[0056] Package libgcc is already installed.\nWARN[0056] Nothing to do.\nWARN[0056] Package libstdc++ is already installed.\nWARN[0056] Nothing to do.\nWARN[0056] Running in chroot, ignoring request: start\nWARN[0057] Package lz4 is already installed.\nWARN[0057] Nothing to do.\nWARN[0057] Package ncurses is already installed.\nWARN[0057] Nothing to do.\nWARN[0058] Package openssl is already installed.\nWARN[0058] Nothing to do.\nWARN[0058] Package mariner-release is already installed.\nWARN[0058] Nothing to do.\nWARN[0058] Package parted is already installed.\nWARN[0058] Nothing to do.\nWARN[0058] Package pcre is already installed.\nWARN[0059] Nothing to do.\nWARN[0059] Package pkg-config is already installed.\nWARN[0059] Nothing to do.\nWARN[0059] Package popt is already installed.\nWARN[0059] Nothing to do.\nWARN[0059] Package readline is already installed.\nWARN[0059] Nothing to do.\nWARN[0059] Package sed is already installed.\nWARN[0059] Nothing to do.\nWARN[0061] Package systemd is already installed.\nWARN[0061] Nothing to do.\nWARN[0062] Package util-linux is already installed.\nWARN[0062] Nothing to do.\nWARN[0063] Package xz is already installed.\nWARN[0063] Nothing to do.\nWARN[0063] Package zlib is already installed.\nWARN[0063] Nothing to do.\nINFO[0063] Adding user (root)\nWARN[0063] Failed to stop gpg-agent. This is expected if it is not installed: exec: \"gpgconf\": executable file not found in $PATH\nINFO[0063] Proceeding to cleanup extra files in chroot /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/workspace/setuproot.\nINFO[0063] Cleaning up directory /tmp/additionalfiles\nINFO[0064] Cleaning up directory /tmp/postinstall\nINFO[0064] Cleaning up directory /tmp/sshpubkeys\nFinished updating /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/imager_output\ncd /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/tools/roast && \\\n        go test -covermode=atomic -coverprofile=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/tools/roast.test_coverage ./... && \\\n        go build -o /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools\n?       microsoft.com/pkggen/roast      [no test files]\n?       microsoft.com/pkggen/roast/formats      [no test files]\nVMXTEMPLATE=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/assets//ova/vmx-template OVFINFO=/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/assets//ova/ovfinfo.txt \\\n/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/out/tools/roast \\\n        --dir=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/imager_output \\\n        --config /root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit/resources/imageconfigs/iso_initrd.json \\\n        --output-dir /root/cbl/CBL-Mariner-1.0.20210819-1.0/out/images/iso_initrd \\\n        --tmp-dir /root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/roaster_tmp \\\n        --release-version 1.0.20210829.2219 \\\n        --log-level=info \\\n        --log-file=/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/logs/imggen/roast.log \\\n        --image-tag=\nINFO[0000] Converting (1) artifacts\nWARN[0030] tar: Removing leading `/' from member names\nWARN[0042] Skipping move. Source and destination are the same file (/root/cbl/CBL-Mariner-1.0.20210819-1.0/out/images/iso_initrd/iso-initrd.img.tar.gz).\nINFO[0042] [1/1] Converted (/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/iso_initrd/imager_output/rootfs) -> (/root/cbl/CBL-Mariner-1.0.20210819-1.0/out/images/iso_initrd/iso-initrd.img.tar.gz)\nmake[1]: Leaving directory '/root/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit'\nINFO[0000] Building ISO under '/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/workspace'.\nWARN[0000] Unexpected: temporary ISO build path '/root/cbl/CBL-Mariner-1.0.20210819-1.0/build/imagegen/full/workspace' exists. Removing.\nINFO[0005] Preparing ISO's bootloaders.\nWARN[0005] 3+0 records in\nWARN[0005] 3+0 records out\nWARN[0005] 3145728 bytes (3.1 MB, 3.0 MiB) copied, 0.00951747 s, 331 MB/s\nINFO[0007] Generating ISO image under '/root/cbl/CBL-Mariner-1.0.20210819-1.0/out/images/full/full-1.0.20210829.2214.iso'.\nWARN[0007] I: -input-charset not specified, using utf-8 (detected in locale settings)\nWARN[0007] Size of boot image is 4 sectors -> No emulation\nWARN[0007] Size of boot image is 6144 sectors -> No emulation\nWARN[0007]   1.44% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]   2.88% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]   4.32% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]   5.76% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]   7.20% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]   8.64% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]  10.07% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0007]  11.51% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0008]  12.95% done, estimate finish Sun Aug 29 22:19:56 2021\nWARN[0008]  14.39% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0008]  15.83% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0008]  17.27% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0008]  18.70% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0008]  20.14% done, estimate finish Sun Aug 29 22:20:00 2021\nWARN[0008]  21.58% done, estimate finish Sun Aug 29 22:20:00 2021\nWARN[0008]  23.02% done, estimate finish Sun Aug 29 22:20:00 2021\nWARN[0009]  24.46% done, estimate finish Sun Aug 29 22:20:00 2021\nWARN[0009]  25.90% done, estimate finish Sun Aug 29 22:20:03 2021\nWARN[0009]  27.33% done, estimate finish Sun Aug 29 22:20:03 2021\nWARN[0009]  28.78% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0009]  30.21% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0009]  31.65% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0009]  33.09% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0009]  34.53% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0009]  35.97% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0009]  37.41% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0010]  38.84% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0010]  40.28% done, estimate finish Sun Aug 29 22:20:00 2021\nWARN[0010]  41.72% done, estimate finish Sun Aug 29 22:20:03 2021\nWARN[0010]  43.16% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0010]  44.60% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0010]  46.04% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0010]  47.47% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0010]  48.92% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0010]  50.35% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0010]  51.79% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0010]  53.23% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0010]  54.67% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0010]  56.11% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0011]  57.55% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0011]  58.98% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0011]  60.42% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0011]  61.86% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0011]  63.30% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0011]  64.74% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0011]  66.18% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0011]  67.62% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0011]  69.05% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0011]  70.50% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0012]  71.93% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0012]  73.37% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  74.81% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  76.25% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  77.69% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  79.13% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  80.56% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  82.00% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0012]  83.44% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0012]  84.88% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0012]  86.32% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0012]  87.76% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0013]  89.20% done, estimate finish Sun Aug 29 22:20:01 2021\nWARN[0013]  90.64% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0013]  92.07% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0013]  93.51% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0013]  94.95% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0013]  96.39% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0014]  97.83% done, estimate finish Sun Aug 29 22:20:02 2021\nWARN[0014]  99.27% done, estimate finish Sun Aug 29 22:20:03 2021\nWARN[0014] Total translation table size: 2048\nWARN[0014] Total rockridge attributes bytes: 29996\nWARN[0014] Total directory bytes: 72498\nWARN[0014] Path table size(bytes): 222\nWARN[0014] Max brk space used 44000\nWARN[0014] 347556 extents written (678 MB)\nroot@hanhan:~/cbl/CBL-Mariner-1.0.20210819-1.0/toolkit# ls\n```\n\n</details>","tags":["开发","Linux","伪*Server运维"],"categories":["伪*Server运维","开发","日常"]},{"title":"IIS反向代理_基础方法以及某些小坑","url":"/2021/08/iis-reverse-proxy/","content":"\n# 使用反向代理\n\n使用反向代理的方法很简单，网上[一搜一大把](https://cn.bing.com/search?q=IIS+%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%8)。\n\n大致就是：\n\n## 下载并安装Microsoft Web Platform Installer\n\n地址：[https://www.microsoft.com/web/downloads/platform.aspx](https://www.microsoft.com/web/downloads/platform.aspx)\n\n一直下一步就可以安装完成。\n\n## 安装反向代理模块\n\n打开Web PI，然后在右上角输入`ARR`然后回车搜索，选中`Application Request Router 3.0 Beta (英语)`，点击`添加`，再点击`安装`，并在随后出现的对话框中点击`我接受`，如图所示：\n\n![](/wp-content/uploads/2021/08/7JAHUSLO5XGT_TTIU112.png)\n\n添加ARR到待安装列表\n\n![](/wp-content/uploads/2021/08/OYS@Z7ZD82023SF1.png)\n\n安装ARR\n\n# 配置反向代理\n\n依次进入本地服务器页面(`起始页`下方的页面)，`Application Request Routing`页面。并在右侧找到`Proxy Settings`，进入此页面。\n\n勾选`Enable Proxy`，然后保存。\n\n## 这里有一个坑 参见[此处](#rewrite-host-header)\n\n![](/wp-content/uploads/2021/08/TYJSPZIXU7IYHMR78.png)\n\n配置ARR\n\n然后去你的反向代理服务器页面，找到`URL重写`，在右侧找到`添加规则`，随后在弹出来对话框内选择`反向代理`并继续。\n\n![](/wp-content/uploads/2021/08/9U7F7ZJ39PV05PZUB.png)\n\n添加规则\n\n在随后出现的对话框内输入被反向代理的服务器地址即可。\n\n# 坑の聚集处(其实现在只有一个)\n\n## #1 请决定是否打开 Reverse rewrite host in response\n\n此选项用于将被反向代理的页面的重定向(301)请求的Location标头地址的主机替换成自身位置。（哎呀我也解释不清楚举个例子罢）  \n举例：  \n假设 `127.0.0.1` 是我们的反向代理服务器， `example.com`为被代理服务器，勾选`Reverse rewrite host in response headers` 之后\n\n标头：`Location: https://example.com/XXXXXX`  \n就会被替换成：`Location: http://127.0.0.1/XXXXXX`  \n有时候被代理服务器确实要跳转第三方页面，不关闭此选项就会造成跳转到被代理服务器不存在的页面，从而出现404错误。  \n你也可以可以看我这个亲身例子  \n[https://github.com/reruin/sharelist/issues/561](https://github.com/reruin/sharelist/issues/561)","tags":["伪*Server运维","IIS","Web","Windows Server"],"categories":["伪*Server运维","开发"]},{"title":"Ubuntu出现Hash Sum mismatch错误的解决方案","url":"/2021/07/fix-hash-sum-mismatch-in-ubuntu/","content":"\n最近在WTG的WSL(1)上执行`sudo apt update`报错：`E: Failed to fetch store:/var/lib/apt/lists/partial/mirrors.aliyun.com_ubuntu_dists_focal-proposed_restricted_cnf_Commands-amd64 Hash Sum mismatch`\n\n![](/wp-content/uploads/2021/07/image.png)\n\n上网翻了翻是因为文件意外被修改导致MD5值不一致，网上有说是Great Firewall of Celestial Dynasty(translated by google)的问题，但我怎么看怎么觉得是我WTG意外断电次数过多/意外拔掉U盘/BUG\\_CODE\\_USB\\_3.0各种奇奇怪怪的东西整出来的问题（之前更新的好好的）。\n\n话不多说，下面是解决方案：\n\n```bash\n# 删除源缓存\nsudo rm -fR /var/lib/apt/lists/*\n# 新建下载缓存文件夹\nsudo mkdir /var/lib/apt/lists/partial\n# 重新更新源\nsudo apt-get update \n```","tags":["Linux","日常","Linux子系统","Ubuntu","Windows Subsystem Linux","WSL"],"categories":["伪*Server运维","日常"]},{"title":"给适用于Windows的Linux子系统(第二代)添加图形界面","url":"/2021/05/wsl2-gui/","content":"\n> 警告  \n> **此内容仅适用于Windows 10 2004(OS:19041)及以上版本，先前版本并不支持Windows Subsystem Linux 2，笔者也并未对其测试桌面体验的可行性**\n\n## 配置系统环境\n\n要切换到第二代WSL，我们需要在**权限提升的**Powershell(以管理员身份运行)键入以下指令：\n\n```powershell\n#安装WSL模块\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n#安装虚拟机平台（WSL2特性）\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n![](/wp-content/uploads/2021/05/image-3.png)\n\n配置功能\n\n在配置完成后，我们需要安装WSL2的内核更新包，[点击下载](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)，然后安装即可。\n\n在下载和安装的过程中，我们来进行一些简要的配置，修改内存、交换设定等，因为WSL2默认可以使用的内存大小为主机的`80%`，对于Linux而言即使装了桌面，我也就600MiB左右，分多了反而有可能卡主机的Windows。\n\n打开Windows资源管理器，在地址栏输入 `%UserProfile%` 并回车，然后在该目录下创建一个文件, 名字为 `.wslconfig` ,写入内容示例如下，其中`memory`选项对应内存大小，`swap`对应交换大小\n\n```\n[wsl2]\nmemory=2GB\nswap=2GB\nlocalhostForwarding=true\n```\n\n[![](/wp-content/uploads/2021/05/image-4.png)](https://www.yuameshi.top/wp-content/uploads/2021/05/image-4.png)\n\n.wslconfig\n\n将以上步骤均做完后，您可以重新启动您的计算机，进行功能配置。\n\n重新启动后，我们要将WSL 2设置为默认版本，需要在Powershell中键入`wsl --set-default-version 2`\n\n在在一切完成后，你可以到Microsoft Store安装Linux发行版，这里我采用[Ubuntu 20.04LTS](https://www.microsoft.com/store/productId/9N6SVWS3RX71) 。\n\n安装完成后打开Ubuntu，他会让你进行一些基本配置，如设置用户名密码等。\n\n## 安装Linux图形化套件及配置\n\n重新启动后，启动安装的WSL发行版，创建初始账户，更新包，然后安装`xrdp`、`dbus-x11`、`kde-full`(这将会占用您大约3.7GB的磁盘空间)，\n\n```bash\nsudo apt update\nsudo apt upgrade -y\nsudo apt install xrdp kde-full dbus-x11 -y\n```\n\n请注意，如果出现如下图所示的提示时，输入您当前账户的密码即可，在您输入任何字符后，画面不会有变化，但是实际上是输入了的。\n\n![](/wp-content/uploads/2021/05/image-5.png)\n\n然后按以下代码键入：\n\n```bash\n#配置xrdp默认启动环境\nsudo sed -i.bak '/fi/a #xrdp multiple users configuration \\n startkde \\n' /etc/xrdp/startwm.sh\n#开启端口及重启xrdp服务\nsudo ufw allow 3389/tcp\nsudo /etc/init.d/xrdp restart\n```\n\n## 准备连接WSL\n\n在终端输入：`ifconfig`，若没有该包则使用`sudo apt install ifconfig -y && ifconfig`，并记住红框内的数字（每次启动均不同）\n\n![](/wp-content/uploads/2021/05/image-6.png)\n\n获取IP地址\n\n然后在Windows下启动远程桌面客户端（按下Win+S并输入rd选择如图选项即可）\n\n![](/wp-content/uploads/2021/05/image-8.png)\n\n启动远程桌面客户端\n\n然后再客户端内键入上一步获取的IP地址，并点击\"连接\"\n\n然后远程桌面客户端会提示有安全风险，直接确定即可。\n\n![](/wp-content/uploads/2021/05/image-9.png)\n\n连接WSL\n\n然后就会开启一个登陆页面，在这里输入您在WSL中的账号和密码，并单击Login。\n\n[![](/wp-content/uploads/2021/05/image-10.png)](https://www.yuameshi.top/wp-content/uploads/2021/05/image-10.png)\n\n登录XRDP\n\n然后就可以看到KDE的初始画面了。\n\n[![](/wp-content/uploads/2021/05/image-12.png)](https://www.yuameshi.top/wp-content/uploads/2021/05/image-12.png)\n\n这不是初始画面（）","tags":["Linux子系统","WSL2"],"categories":["伪*Server运维","开发"]},{"title":"使用Termux进行手机挖矿(XMR)","url":"/2021/05/termux-xmrig/","content":"\n> 警告 - 写在开头  \n> **使用ARM架构的CPU挖坑不仅效率低下，还会使硬件老化加快，所以本文只作为娱乐性教程，出现任何后果本人概不负责**\n\n## 在这之前\n\n你需要有一个门罗币钱包，一台Android手机，以及脑子。\n\n关于选择何种钱包可以到[门罗币官方(?)](https://www.getmonero.org/downloads/)根据自己的个人需求选择。\n\n这里我们选择[MyMonero](https://mymonero.com/)，只想试试或者不想申请钱包的可以用我的钱包地址(头图里自取)(有谁会白打工呢)。[GitHub Release](https://github.com/mymonero/mymonero-android-js/releases/latest)\n\n![](/wp-content/uploads/2021/05/IMG_20210509_093602.jpg)\n\n注意：创建钱包时一定要记忆好这一个secret mnemonic\n\n> 注意  \n> **创建钱包时一定要记忆好这一个secret mnemonic，并且不要泄露给他人，这是获取账号内资产的唯二途径中的一个(这号也是测试，随便泄露)**\n\n## 配置环境\n\n首先，我们要下载Termux，但该应用在Play、酷安的商店均已停止更新，所以要去F-Droid的自动化构建服务上下载，先前从酷安、Play商店下载的需要卸载并重新安装以**更新**(就是你不更新也行)。 [链接](https://f-droid.org/en/packages/com.termux/) [版本0.112直链](https://f-droid.org/repo/com.termux_112.apk)\n\n然后，我们需要一个Linux环境，以下初始配置脚本来着[AnLinux](https://f-droid.org/zh_Hans/packages/exa.lnx.a/ \"https://f-droid.org/zh_Hans/packages/exa.lnx.a/\")，将会安装Ubuntu-Linux 20.04和一些基本组件\n\n> 注意  \n> **中国大陆的网络环境可能不尽人意，所以上raw.githubusercontent.com最好先开魔法上网。**\n\n```bash\npkg install wget openssl-tool proot -y && hash -r && wget https://raw.githubusercontent.com/EXALAB/AnLinux-Resources/master/Scripts/Installer/Ubuntu/ubuntu.sh && bash ubuntu.sh\n```\n\nTermux使用技巧\n\n_keyboard\\_arrow\\_down_\n\n可以使用'termux-change-repo'来获取位于中国大陆的Termux源以加速下载，全选Main,Game和Science并在之后的对话框选择清华源即可 并且通过Tab可以使用代码补全（就是两个箭头的那个图标）\n\n如果不是网络环境特别差的话一般1分钟即可安装完毕。(不挂魔法别想)\n\n![](/wp-content/uploads/2021/05/IMG_20210509_092240.jpg)\n\n当你看到如图画面的时候就安装完了\n\n此时输入`./start-ubuntu.sh` 启动Ubuntu\n\n然后粘贴以下脚本\n\n```bash\napt update && apt install vim git build-essential cmake libuv1-dev libssl-dev libhwloc-dev -y \n```\n\n## 构建XMRig\n\n在挖矿前你要选择一个矿池，一般都会提供自己改过的XMRig仓库(虽然我觉得根本没改)。\n\n到时候在下方替换我的仓库地址即可（如果真没给就用官方的[https://github.com/xmrig/xmrig](https://github.com/xmrig/xmrig)）\n\n这里我选择猫池\n\n键入`git clone https://github.com/C3Pool/xmrig-C3 && cd xmrig-C3`\n\n然后键入`vim src/donate.h`\n\n将48、49行的值均改成0以去除抽水\n\n![](/wp-content/uploads/2021/05/IMG_20210509_100033.jpg)\n\nvim使用提示\n\n_keyboard\\_arrow\\_down_\n\n使用i来开启编辑模式，ESC退出，保存退出就先'esc'+':wq&\n\n> 警告  \n> **目前最新版本的XMRig - C3发现一个Bug，即在ARM架构的设备上无法编译（https://github.com/C3Pool/xmrig-C3/pull/5） 2021/5/26最新跟进：C3Pool已经在17天前Merge了上述Pull Request，所以不改应该没什么问题**\n\n## 修复无法在ARM架构设备编译错误的问题\n\n在工作目录下键入 `vim src/crypto/cn/CryptoNight_arm.h` 并进入编辑模式\n\n将623行的`template<xmrig::Algorithm::Id ALGO, bool SOFT_AES>`改为`template<xmrig::Algorithm::Id ALGO, bool SOFT_AES, int interleave>`。即在后尖括号前添加`, int interleave`。然后退出。\n\n![](/wp-content/uploads/2021/05/image.png)\n\n## 继续编译\n\n输入`cmake . && make`。\n\n![](/wp-content/uploads/2021/05/IMG_20210509_101022.jpg)\n\n开始时应能看到如图画面\n\n构建的时间有些久，可能需要5~10分钟。(环境：Redmi K30 Ultra）\n\n构建完成后可以键入`ls`列出目录，成功构建应出现如图所示画面，有一个绿色的xmrig\n\n![](/wp-content/uploads/2021/05/IMG_20210509_102042.jpg)\n\n成功构建\n\n启动可以用以下方法：\n\n`./xmrig -u 钱包地址 -p 矿机名称 -o 矿池地址`\n\n`xmrig -u XXXXXXXX -p K30U -o mine.c3pool.com:13333`\n\n听说使用cn-pico算法效率较高，所以可以在最后加`-a cn-pico`\n\n首次启动要进行性能测试，如图所示。\n\n![](/wp-content/uploads/2021/05/IMG_20210509_102434.jpg)\n\n要性能测试\n\n我个人觉得可能放一个config.json比较好，存放测试数据，也可以直接`./xmrig`启动\n\n键入`vim config.json`，进入编辑模式并输入以下内容，记得将user换成你的钱包地址，pass换成矿机名称，然后按`:wq`退出\n\n```json\n{\n\t\"api\": {\n\t\t\"id\": null,\n\t\t\"worker-id\": null\n\t},\n\t\"http\": {\n\t\t\"enabled\": false,\n\t\t\"host\": \"127.0.0.1\",\n\t\t\"port\": 0,\n\t\t\"access-token\": null,\n\t\t\"restricted\": true\n\t},\n\t\"autosave\": true,\n\t\"background\": false,\n\t\"colors\": true,\n\t\"title\": true,\n\t\"randomx\": {\n\t\t\"init\": -1,\n\t\t\"init-avx2\": 0,\n\t\t\"mode\": \"auto\",\n\t\t\"1gb-pages\": true,\n\t\t\"rdmsr\": true,\n\t\t\"wrmsr\": true,\n\t\t\"cache_qos\": false,\n\t\t\"numa\": true,\n\t\t\"scratchpad_prefetch_mode\": 1\n\t},\n\t\"cpu\": {\n\t\t\"enabled\": true,\n\t\t\"huge-pages\": true,\n\t\t\"huge-pages-jit\": false,\n\t\t\"hw-aes\": null,\n\t\t\"priority\": null,\n\t\t\"memory-pool\": true,\n\t\t\"yield\": true,\n\t\t\"max-threads-hint\": 100,\n\t\t\"asm\": true,\n\t\t\"argon2-impl\": null,\n\t\t\"astrobwt-max-size\": 550,\n\t\t\"astrobwt-avx2\": false,\n\t\t\"cn/0\": false,\n\t\t\"cn-lite/0\": false\n\t },\n\t \"opencl\": {\n\t\t\"enabled\": false,\n\t\t\"cache\": true,\n\t\t\"loader\": null,\n\t\t\"platform\": \"AMD\",\n\t\t\"adl\": true,\n\t\t\"cn/0\": false,\n\t\t\"cn-lite/0\": false,\n\t\t\"panthera\": false\n\t },\n\t \"cuda\": {\n\t\t\"enabled\": false,\n\t\t\"loader\": null,\n\t\t\"nvml\": true,\n\t\t\"cn/0\": false,\n\t\t\"cn-lite/0\": false,\n\t\t\"panthera\": false,\n\t\t\"astrobwt\": false\n\t },\n\t \"donate-level\": 0,\n\t \"donate-over-proxy\": 0,\n\t \"log-file\": null,\n\t \"pools\": [\n\t\t{\n\t\t\t\"algo\": null,\n\t\t\t\"coin\": null,\n\t\t\t\"url\": \"mine.c3pool.com:15555\",\n\t\t\t\"user\": \"钱包地址\",\n\t\t\t\"pass\": \"K30U\",\n\t\t\t\"rig-id\": null,\n\t\t\t\"nicehash\": false,\n\t\t\t\"keepalive\": true,\n\t\t\t\"enabled\": true,\n\t\t\t\"tls\": false,\n\t\t\t\"tls-fingerprint\": null,\n\t\t\t\"daemon\": false,\n\t\t\t\"socks5\": null,\n\t\t\t\"self-select\": null,\n\t\t\t\"submit-to-origin\": false\n\t\t}\n\t],\n\t\"print-time\": 60,\n\t\"health-print-time\": 60,\n\t\"dmi\": true,\n\t\"retries\": 5,\n\t\"retry-pause\": 5,\n\t\"syslog\": false,\n\t\"tls\": {\n\t\t\"enabled\": false,\n\t\t\"protocols\": null,\n\t\t\"cert\": null,\n\t\t\"cert_key\": null,\n\t\t\"ciphers\": null,\n\t\t\"ciphersuites\": null,\n\t\t\"dhparam\": null\n\t},\n\t\"user-agent\": null,\n\t\"verbose\": 0,\n\t\"watch\": true,\n\t\"rebench-algo\": false,\n\t\"bench-algo-time\": 20,\n\t\"pause-on-battery\": false,\n\t\"pause-on-active\": false\n}\n```\n\n## 参考列表\n\n[闲的没事？用手机termux挖矿吧 - 66ccff.work](https://66ccff.work/teach/313.html)\n\n[Fix a bug causing build error in ARM device](https://github.com/KawaiiZapic/xmrig-C3/commit/35d7e9f09c1167114277e121e5420a0186fb39d9)@[KawaiiZapic/xmrig-C3](https://github.com/KawaiiZapic/xmrig-C3/commit/35d7e9f09c1167114277e121e5420a0186fb39d9)","tags":["开发","Termux","XMRig","挖矿"],"categories":["开发","日常"]},{"title":"晚了一个月的船票（）","url":"/2021/05/nasa/","content":"\n![](/wp-content/uploads/2021/05/IMG_20210501_101058.jpg)\n\n好耶，先上截图\n\n本来想直接上NASA给的嵌入代码，但后来发现有跟踪器，所以换了图片，你也可以上[https://mars.nasa.gov/layout/embed/send-your-name/future/certificate/?cn=554991237667](https://mars.nasa.gov/layout/embed/send-your-name/future/certificate/?cn=554991237667)自己看\n\n_NASA的服务器在中国大陆的加载速度不尽人意，可能得等一会才能加载好_\n\n```markup\n<iframe width=\"980\" height=\"410\" src=\"https://mars.nasa.gov/layout/embed/send-your-name/future/certificate/?cn=554991237667\" frameborder=\"0\"></iframe>\n```\n\n你可以在 [https://mars.nasa.gov/participate/send-your-name/future](https://mars.nasa.gov/participate/send-your-name/future) 处获取自己的船票~\n\n如果名字是中文拼音，记得把姓和名倒过来（","tags":["日常"],"categories":["日常"]},{"title":"Ubuntu-Linux服务器初始化(其实就是个备忘录)","url":"/2021/03/ubuntu-linux-init/","content":"\n```bash\n#先开个SWAP\ncd /var\nsudo dd if=/dev/zero of=swapfile bs=1024 count=2000000\nsudo mkswap swapfile\nsudo swapon /var/swapfile\necho /var/swapfile   swap  swap  defaults  0  0 >> /etc/fstab\ncd ~\n#更新和安装wget，curl\nsudo apt update\nsudo apt upgrade\nsudo apt install curl wget -y\n#echo y  sudo apt upgrade (不建议)\n#配置/安装MySQL8\nwget https://dev.mysql.com/get/mysql-apt-config_0.8.16-1_all.deb\ndpkg -i mysql-apt-config_0.8.16-1_all.deb\n#安装选all\n#去https://dev.mysql.com/downloads/repo/apt/检查有没有更新\nsudo apt update\nsudo apt install mysql\n#安装lnmp套\nwget http://soft.vpser.net/lnmp/lnmp1.8beta.tar.gz -cO lnmp1.8beta.tar.gz && tar zxf lnmp1.8beta.tar.gz && cd lnmp1.8 && ./install.sh lnmp\n#不要安装MySQL\n#Let's Encrypt SSL证书申请-acme.sh客户端\nwget -O -  https://get.acme.sh  sh -s email=你的邮箱地址\n#这里我们使用DNS API模式，各DNS解析商的初始化方法参见下方链接\n#https://github.com/acmesh-official/acme.sh/wiki/dnsapi\n#这里我是cloudflare，我们要让acme.sh先知道我们的api令牌和各种信息\nexport CF_Key=\"我的CloudFlare API令牌\"\nexport CF_Email=\"我的CloudFlare账户邮箱\"\n~/.acme.sh/acme.sh --issue --dns dns_cf -d 待申请SSL的域名\n#申请过后执行 crontab -e 检查是否加了自动续签\n#正常来说会有类似下面这行东西\n#33 0 * * * \"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\" > /dev/null\n#Let's Encrypt SSL证书申请-Certbot客户端(已弃用)\n#sudo snap install core\n#sudo snap refresh core\n#sudo snap install --classic certbot\n#sudo ln -s /snap/bin/certbot /usr/bin/certbot\n#./certbot-auto certonly -d *.域名 域名 --manual --preferred-challenges dns --server https://acme-v02.api.letsencrypt.org/directory\n##执行命令：dig -t txt _acme-challenge.域名查询TXT记录是否生效\n#配置renew\n#sudo apt install python3.9\n#wget https://bootstrap.pypa.io/get-pip.py\n#pip install certbot-nginx\n#sudo python3.9 ./get-pip.py\n#cd /etc/letsencrypt/renewal\n#ls\n#vim '你的域名的配置文件'\n#修改\n#authenticator = nginx                                              #installer = #nginx                                                                   \n#ln -s /usr/local/nginx/conf/ /etc/nginx\n#echo 1  certbot --force-renew\n#定义自动任务\n#crontab -e\n#添加：30 2 * * 1 sudo certbot --force-renew\n#上面的执行时间为：每周一半夜2点30分执行renew任务。\n#以下为配置Trojan，国内服务器就免了\nsudo bash -c \"$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)\"\nsudo cp /usr/local/etc/trojan/config.json /usr/local/etc/trojan/config.json.bak\nsudo vim /usr/local/etc/trojan/config.json\n#配置密码，证书等\nsudo systemctl restart trojan\n#查看状态：sudo systemctl status trojan\nsudo systemctl enable trojan  #开机自启动，\n\n#开启BBR\necho \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\necho \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\n#保存生效\nsysctl -p\n#reboot\n#测试：\nsysctl net.ipv4.tcp_available_congestion_control\n#如果结果中有 BBR，则内核开启 BBR 算法成功\nlsmod  grep bbr\n#看到 tcp_bbr 则说明 BBR 启动成功\n```\n\n## 性能测试(大雾)：\n\n```bash\n#跑分（UnixBench）\nwget https://s3.amazonaws.com/cloudbench/software/UnixBench5.1.3.tgz\ntar -xf UnixBench5.1.3.tgz\ncd UnixBench/\nmake all\n./Run\n#Speedtest测速\nwget -qO- bench.sh  bash\n#流媒体检测\nbash <(curl -sSL \"https://github.com/CoiaPrant/MediaUnlock_Test/raw/main/check.sh\")\n#测回程脚本（二选一）\nwget -q kos.f2k.pub -O kos && sh kos\nwget -qO- git.io/besttrace  bash\n#三网测速脚本\nbash <(curl -Lso- https://git.io/superspeed)#LemonBench\ncurl -fsSL https://ilemonrain.com/download/shell/LemonBench.sh  bash -s fast  #快速\ncurl -fsSL https://ilemonrain.com/download/shell/LemonBench.sh  bash -s full  #完整\n```","tags":["Linux"],"categories":["伪*Server运维"]},{"title":"得，原来之前一直没开BBR","url":"/2021/03/bbr/","content":"\n之前一直听人家说Linux现在都自动开BBR，今天群里又双叒叕在聊vps。\n\n因为刚买的时候都是20MiB/s下载，就算现在是两会敏感时期也不应该一直都是100KiB/s这么慢（）。\n\n于是我就去多方考证了一下我的VPS提供商的质量是不是真的不太彳亍（）\n\n结果我一看，不得了啊。\n\n![](/wp-content/uploads/2021/03/IMG_20210307_170752.jpg)\n\n[原网页](https://www.vpszh.com/697)\n\n得，那我就看看开了BBR没（）\n\n这一看，就又是一个不得了（）\n\n![](/wp-content/uploads/2021/03/IMG_20210307_163018.jpg)\n\n我的BBR呢（）\n\n然后我反手就给开了个BBR（）\n\n![](/wp-content/uploads/2021/03/IMG_20210307_163126.jpg)\n\n测了测速，这TM也钛快了（）\n\n![](/wp-content/uploads/2021/03/IMG_20210306_2202164.jpg)\n\n昨天\n\n![](/wp-content/uploads/2021/03/IMG_20210307_164617.jpg)\n\n刚刚\n\n这...我：？？？\n\n...\n\n得，以后记得开BBR（）\n\n![](/wp-content/uploads/2021/03/Screenshot_2021-03-07-16-52-57-900_com.microsoft.emmx_.jpg)\n\n话说回来，T的速度也快了100倍（有没有很快）（没错就是100倍）\n\n![](/wp-content/uploads/2021/03/IMG_20210307_165844.jpg)\n\n直接下载也快了10倍（）","tags":["Linux","伪*Server运维"],"categories":["伪*Server运维"]},{"title":"针不戳，终于到货了","url":"/2021/03/super-grate-2/","content":"\n![](/wp-content/uploads/2021/04/IMG_20210408_222157.jpg)\n\n相关链接：\n\nhttps:\n\n[https://www.yuameshi.top/2021/02/ohhhh/](https://www.yuameshi.top/2021/02/ohhhh/)\n","tags":["崩坏3","日常","抽卡"],"categories":["日常"]},{"title":"Windows+IIS环境下配置WordPress教程","url":"/2021/02/win-wp/","content":"\n**Part 0:环境准备**\n\n **0.0安装VC运行库**\n\n        这个……不用多说了吧。\n\n        M$官方下载页面：[https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0](https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0)\n\n        x86：[https://aka.ms/vs/16/release/vc\\_redist.x86.exe](https://aka.ms/vs/16/release/vc_redist.x86.exe)\n\n        x64：[https://aka.ms/vs/16/release/vc\\_redist.x64.exe](https://aka.ms/vs/16/release/vc_redist.x64.exe)\n\n#     0.1下载MySQL\n\n        WordPress需要MySQL作为数据库来储存我们的文章，所以我们需要准备MySQL。\n\n        它可以在 [https://dev.mysql.com/downloads/mysql/](https://dev.mysql.com/downloads/mysql/) 得到，点击\"Download\"下载，此时他会弹出一个页面问你是否要注册Oracle账户，您可以按需注册，但在这里我们不需要，单击\"**No thanks, just start my download.**\"后就可以跳过\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/28f1109c2729d579f2e8ba899e857d4a5dbacac9.png@1320w_710h.webp)\n\n下载MySQL\n\n            \\*为确保你的数据安全与稳定性, 我建议您在下载完毕后对比文件效验码(MD5)以检验文件完整性。\n\n        配置环境变量：\n\n        使用CMD/Power Shell或\"运行\"对话框，启动`SystemPropertiesAdvanced.exe`。\n\n        创建系统环境变量，如下图\n\n        变量名：\"`MYSQL_HOME`\"\n\n        变量值为MySQL根目录，如图所示\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/d260fa18230a3c014a1eb8feae62cc0bd33b2ac9.png@1320w_706h.webp)\n\n配置环境变量\n\n        在\"MySQL\"下载好后将其解压到你喜欢的目录\n\n            \\*我们十分建议您将解压目录中的\"**mysql-8.0.23-winx64**\"字串删除，否则将会出现一层多余的目录。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/730bb61077b7b266a9c91762dd42de291fce84ea.png@1320w_696h.webp)\n\n解压MySQL到你喜欢的目录\n\n        在解压完成后，启动管理员命令提示符，进入MySQL根目录，并通过命令`CD`进入**bin**文件夹，如图\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/43134f4a8cd7bb02921bd77718855c5227b5b465.png@1320w_714h.webp)\n\n        键入`mysqld --initialize-insecure --user=mysql`，并回车以初始化MySQL的data目录，此时您大可以回到上一级目录确认其是否已经被生成。\n\n        继续键入`mysqld -install`，并回车以安装系统服务。\n\n        继续键入`net start MySQL`，以启动MySQL服务，如下图所示。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/a79153c2b538592ae2482e95480c086eebfd8cad.png@1320w_666h.webp)\n\n这是一个正常的安装结果\n\n        至此，MySQL的安装与初始化就结束了，当您请不要关闭命令窗口，继续键入`mysql -u root -p`，此时将提示您输入您的密码，初始密码为空，直接回车即可\n\n            \\*\\*注意，以下所有的命令都需要**带分号**，**大小写不敏感**，但对于**密码**是**大小写敏感**的。\n\n        为确保安全，我们建议您在登陆后第一时间修改root账户的密码，如图所示，键入**`alter user 'root'@'localhost' identified with mysql_native_password by '你要改的密码';`**(带分号)，其中`'你要改的密码'`请替换为你要改的密码。\n\n        继续键入`create database wordpress_db;`，以创建一个独立的WordPress数据库\n\n        继续键入`**create user 'wordpress_user'@'localhost' identified by 'password**';`给WordPress创建独立的用户。(`password`为用户密码，不建议设置这个密码)\n\n        继续键入**`grant all privileges  on wordpress_db.* to \"wordpress_user\"@'localhost';`**\n\n    ​    ​以授予WordPress用户对于WordPress数据库的所有权限(除了root独有的grant命令)。\n\n        继续键入\"exit\"，或\"quit\"退出，以上操作如图所示。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/b3e296c312f38e510f8bf379fea04c554875c2e6.png@1320w_666h.webp)\n\n在MySQL中的操作\n\n#     0.2 配置PHP环境\n\n        PHP可以从[https://windows.php.net/download/](https://windows.php.net/download/)下载，但请不要选择最新的PHP 8.0 (8.0.1)，因为此版本刚推出不久，许多应用程序/主题尚未适配，WordPress也只是**对其兼容**。\n\n        一样，下载完成后解压。复制一份**`php.ini-production`**，并将其重命名为\"php.ini\"然后将其打开，并将其进行下列图1~3的改动，进行图4的添加，添加内容我会在下方打出来。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/cabab8fe11a336d8e4dcc80e6c4a80f6fcb6856e.png@1320w_702h.webp)\n\n```\nextension=bz2\n extension=com_dotnet\n extension=curl\n extension=dba\n extension=enchant\n extension=exif\n extension=ffi\n extension=fileinfo\n extension=ftp\n extension=gd2\n extension=gettext\n extension=gmp\n extension=imap\n extension=intl\n extension=ldap\n extension=mbstring\n extension=mysqli\n extension=oci8_12c\n extension=odbc\n extension=opcache\n extension=openssl\n extension=pdo_firebird\n extension=pdo_mysql\n extension=pdo_oci\n extension=pdo_odbc\n extension=pdo_pgsql\n extension=pdo_sqlite\n extension=pgsql\n extension=phpdbg_webhelper\n extension=shmop\n extension=snmp\n extension=soap\n extension=sockets\n extension=sodium\n extension=sqlite3\n extension=sysvshm\n extension=tidy\n extension=xmlrpc\n extension=xsl\n extension=zend_test\n```\n\n0.3 配置IIS\n\n请按照下图的1~10步依次操作，其中4为下拉框，请注意，5~8请点击右侧的\"**…**\"并在弹出的文件选择框选择您PHP存放目录下的\"**php-cgi.exe**\"，最后弹出的确认框请点击**Yes**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/f0ae5240e5fa94ccb81320b9f6eb731c62c30eac.png@1320w_708h.webp)\n\nIIS添加PHP配置\n\n**1.0WordPress配置**\n\n    ​好了，终于轮到WordPress出场了（超  级  慢  热）\n\n    ​WordPress可以在\"[https://wordpress.org/download/#download-install](https://wordpress.org/download/#download-install)\"下载\n\n    ​这是直接给的包\"**https://wordpress.org/latest.zip**\"\n\n    ​但是超  级  慢，还不如建议从Github下载：\n\n    ​仓库地址：[https://github.com/WordPress/WordPress](https://github.com/WordPress/WordPress)\n\n    ​下载完成后，解压，复制所有文件到网站根目录\n\n**1.1：添加站点并进行初步配置（可选）**\n\n    ​首先，如果需要，就新建一个网站，端口随便取，比如说我现在80端口已经有一个，那就加个3300的（如果你是搞域名虚拟主机那就没事了）\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/e61d08ff60fd706764e5f490734673ea6873340c.png@1320w_1040h.webp)\n\n**\\*\\***为避免出现权限问题，得授予一下Everyone权限\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/fe8f61fe743aa0045ef16c28424776b91e155958.png@908w_1196h.webp)\n\n **​\\*\\*\\*特别注意：IIS默认的页面没有index.php，所以记得给你的网站添加默认文档（index.php），不然就会出现403**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/e2464c568cdc8bd3d3c5b9b34c9995a5168be9dc.png@1320w_896h.webp)\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/2cbf1090a2583f27bd455f1fb2e0ca0986fedcda.png@1320w_824h.webp)\n\n**1.2：开始安装WordPress（终）**\n\n    ​首先通过浏览器访问你的服务器**域名**，或外部IP（不然你就得后面改）。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/3ef8952580004bd075bca5bdda84de17c24803f8.png@1320w_958h.webp)\n\n **​**然后进行WP著名的5分钟安装程序\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/2f83d9661baddad55c3c5b78c1f3da0cc606d399.png@1320w_774h.webp)\n\n    ​\\*\\*如果你服务器的硬盘I/O比较慢，那建议在**php.ini**里搜索并修改`max_execution_time`（单位：秒），然后修改为大些的数值，不然会安装失败（得重置数据库）。\n\n    ​在按下\"Install WordPress\"之后，看到类似下图的界面则证明你成功了\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/Blog-CDN@main/forwarded-images/bilibili-cv9888796/2c7eb2fce89e3a70defa61fe2495cdbc1d16d809.png@1320w_812h.webp)\n\n    ​然后按\"Log In\"登录，就可以开始你的WordPress之旅了（逃）。\n\n    ​视频教程：[传送门](https://www.bilibili.com/video/BV1wK4y1s7ve/)或点击下方链接。\n\n    ​这篇文章也会同步在我的BiliBili账户发布，[https://www.bilibili.com/read/cv9888796](https://www.bilibili.com/read/cv9888796)","tags":["开发","伪*Server运维","WordPress"],"categories":["伪*Server运维","开发","日常"]},{"title":"好耶！","url":"/2021/02/ohhhh/","content":"\n卧槽牛逼？\n\n![](/wp-content/uploads/2021/03/1615014979810.jpeg)\n\n![](/wp-content/uploads/2021/03/1615014982963.jpeg)","tags":["日常","三蹦子"],"categories":["日常"]},{"title":"得，买了个新Server","url":"/2021/02/new-server/","content":"\n![](/wp-content/uploads/2021/03/IMG_20210306_074834.jpg)\n\n穷了啊啊啊(疯狂暗示)\n\n![](/wp-content/uploads/2021/03/IMG_20210306_075856_210.png)\n\nUnixBench结果\n\n![](/wp-content/uploads/2021/03/IMG_20210306_075818_059.jpg)\n\n下载速度\n\n![](/wp-content/uploads/2021/03/IMG_20210314_122438-1000x1024.jpg)\n\nPing延迟\n\n![](/wp-content/uploads/2021/03/IMG_20210307_164617-1.jpg)\n\n三网测速（3月7日的结果，已开启BBR）","tags":["伪*Server运维","日常"],"categories":["伪*Server运维","日常"]},{"title":"啊，终于搞定了","url":"/2020/06/awsl/","content":"\n在历时一个月之后，我的QQ音乐网页播放器终于告一段落，期间，我也算是心力憔悴(即使已经用了官方的API)。\n\n放一个Github页面： [点击前往](https://qqmusic.yuameshi.top/)，求Star，求Fork，Issue……就免了，我自己都知道有多少Bug（逃）\n\n这里是自己做的那个：[点击前往](https://blog-old.yuameshi.top/proj/qqmusic)\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200609/IMG_1.jpg)\n\n仓库页面\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200609/IMG_2.jpg)\n\n应用截图","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]},{"title":"入 新 坑","url":"/2020/05/bh3/","content":"\n承蒙 [DrYexiu](https://space.bilibili.com/6809647)大佬的帮助与耐心解惑，我成功的入了新坑(崩坏3)。\n\n![](https://blog-old.yuameshi.top/passages/20200524/IMG_0038.jpg)\n\n哦豁\n\n不过我怀疑我入了假的5天坑\n\n![](https://blog-old.yuameshi.top/passages/20200524/IMG_0163.jpg)\n\n看看这是人干的事吗，入坑3天刷这么多\n\n没错这就是人淦的事儿（逃）","tags":["迁移自旧Blog","崩坏3","日常"],"categories":["迁移自旧Blog"]},{"title":"Blog的布局又大改了一波","url":"/2020/05/blog-ui-has-changed/","content":"\nBlog的布局又大改了一波，小仿WP的。(确切的说，模仿老♂黑的)\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200511/old.jpg)\n\nBefore\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200511/new.jpg)\n\nAfter","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]},{"title":"基于Hexo做一个位于GitHub的博客","url":"/2020/04/build-blog-via-hexo-at-github/","content":"\n要进行这项工作，你的计算机上需要已经安装好：  \n         1.Node.js 10.0或者更高（地址：[nodejs.org](http://nodejs.org)）  \n         2.Git工具（地址：[git-scm.com/downloads](http://git-scm.com/downloads)；国内建议淘宝镜像[npm.taobao.org/mirrors/git-for-windows/](http://npm.taobao.org/mirrors/git-for-windows/)）\n\n> 注意  \n> **Git安装时需要允许命令行访问**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/12f34b60f4ada343757dc46d198734611aec2f2f.png@1320w_996h.jpg)\n\n要选带命令行的\n\n除此之外，你还要准备一个`GitHub账户`。  \n好，又水了很多，现在开始：\n\n> Step-1\n> \n> 登录你的GitHub账户（没有就去注册！），新建一个仓库，仓库名随便写,什么都不用管，直接创建。\n\n> 注意  \n> **如果填写\"你的用户名.github.io\"那么以后你的博客地址则为\"你的用户名.github.io\"，否则访问地址则为\"你的用户名.github.io/仓库名/\"**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/eddd87b85f8158c15c69e8e8772bf3aac1f999f3.png@1320w_666h.jpg)\n\n例如如图创建的代码仓库，访问地址为  \n\"i-am-a-loser-using-windows-server.github.io\"\n\n\\*\\*注意，创建完仓库最好不要直接上传文件，窗口最好也别关。\n\n> Step-2：下载Hexo框架\n> \n> 下载地址：[https://github.com/hexojs/hexo](https://github.com/hexojs/hexo)，直接下载Zip即可（其实感觉不用）\n\n> Step-3：安装，部署并启动Hexo\n> \n> 3.1 解压下载的Zip  \n> 3.2 进入hexo-master，就是有一堆文件那个，在目录下按住Shift右击，选择 `在此处打开Powershell窗口(S)`\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/374d33eb045fb6ba1385a2676bfbf48479d8f184.png@1320w_996h.jpg)\n\n选择 `在此处打开Powershell窗口(S)`\n\n> 3.3 依次键入：\n\n```\nnpm install hexo-cli -g\nset-ExecutionPolicy RemoteSigned\nhexo init 随便写一个名字\ncd 刚刚写的名字\nhexo server  #(或者简写hexo s)\n```\n\n到这里，你就成功地启动了本地的Hexo服务器，一般访问`localhost:4000`或者`127.0.0.1:4000`能够访问到Hexo的本地页面\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/212d18bde8bff5a2e782fcb151b4536d7d84e37d.png@1320w_702h.jpg)\n\n正常的页面输出\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/f04d8f0349335beaf7319ff15115c5662c8488fa.png@1320w_702h.jpg)\n\n此时按下Control+C可以停止本地服务器\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/73fdfea9f782d12bd0fc506d6eaf62f7c7787a30.png@1320w_702h.jpg)\n\n默认Hexo页面\n\n> 4.推送到GitHub仓库\n> \n> 先按下Control+C停止本地服务器，你也可以新建一个Powershell窗口  \n> 首先键入：hexo generate来生成静态页面\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/7eb00fe132f2c44c5d40a93f3d43f6b7c1fa555e.png@1320w_1360h.jpg)\n\n生成静态页面\n\n然后依次键入：\n\n```\ngit init\ngit add .\ngit commit -m \"随便写，这是提交描述\"\n```\n\n键入`cd public`\n\n还记得之前那个GitHub页面吗，现在打开它，将图中被框上的的两行字拷贝，然后键入到Powershell\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/964fd975ccd30311292f88f60cbbae14c61e10a2.png@1320w_670h.jpg)\n\n将图中被框上的两行字拷贝，然后粘贴/键入到Powershell\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/3f6f64a2cfc745dd88f0660e37c091bf75301e30.png@1320w_936h.jpg)\n\n这里是正常的Powershell提示\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/f58b05283b8a926fa54743357a0e3d9c670a3cf9.png@1320w_268h.jpg)\n\n这里是正常的Powershell提示\n\n> 如果出现如下图所示警告则键入：\n> \n> `git config --global user.email \"你的注册邮箱\"`  \n> 或：`  \n> git config --global user.name \"你的账户名\"`\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/adbd0b0fa7b50f134230839d10ecafcfb6f6e909.png@1320w_398h.jpg)\n\n如果出现如图所示警告则键入\"git config --global user.email \"注册邮箱\"\"\n\n             此时刷新GitHub页面，就能看到多了一些文件，此时访问\"你的用户名.github.io\"对于仓库名没有起为\"你的用户名.github.io\"的则访问\"你的用户名.github.io/仓库名\"应当就能看到与本地服务器显示一致的网页。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/42e87010a7ae443a24be2603eacc123eeb0b1182.png@1320w_670h.jpg)\n\n此时刷新GitHub页面，就能看到多了一些文件\n\n此时访问GitHub Pages应当就能看到与本地服务器显示一致的网页\n\n如果无法正常访问可以尝试查看`Settings`里的`GitHub Pages`\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200430/f51de6040afd838b7ff607a57f69913af0fdf1e0.png@1320w_666h.jpg)\n\n如果无法正常访问可以尝试查看Settings里的GitHub Pages  \n（这张图是正常的）\n\n## 写在最后：\n\n想要创建新的文章，请在博客目录里使用：`hexo new \"标题\"`，然后到`\\source\\_posts\\文件名.md`里修改，格式为MarkDown。  \n\n如果觉得丑，想换主题，可以去：[https://hexo.io/themes/](https://hexo.io/themes/)里查找主题更换。  \n还可以加一些插件，可以去： [https://hexo.io/plugins/](https://hexo.io/plugins/)看  \n\\*\\*换主题和加插件请仔细阅读官方的文档，Hexo的和主题的文档都得看。\n\n以后推送到远端的仓库，都可以使用：\n\n```\nhexo generate\ngit add .\ngit commit -m \"随便写，这是提交描述\"\ngit push -u origin master\n```\n\n推送如果出现错误，可以看看强制推送：`git push -f -u origin master`（慎用）\n\n​我不太确定码云(Gitee)有没有GitHub.io那一类服务，不过我看它的说明好像可以的亚子。\n\n顺带一提：BiliBili上我也发了：[https://www.bilibili.com/read/cv5845316](https://www.bilibili.com/read/cv5845316)","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]},{"title":"让你的机械变成固态！","url":"/2020/04/turn-hdd-to-ssd/","content":"\n今天天气真不错，找到一个好东西。\n\n叫PrimoCache，话不多说，直接上图:\n\n[![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200417/aida64.jpg)](https://blog-old.yuameshi.top/passages/20200417/aida64.jpg)\n\nAIDA64磁盘信息\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200417/10151.jpg)\n\nCDM测试结果1\n\n[![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200417/10622.jpg)](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200417/CDM_20200415163824.txt)\n\nCDM测试结果2（点击查看源TXT）\n\n[![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200417/10933.jpg)](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200417/CDM_20200415153952.txt)\n\nCDM测试结果3（点击查看源TXT）\n\n这是一块SATA总线的M.2固态盘，持续写入直接给拉到了四块NVMe组RAID-0的速度（只要你不是传输什么特大文件的话) 。原理是在内存划一个分区拿来做硬盘的DRAM，所以电脑经常异常断电的可以洗洗睡了。\n\n由于手头上没有能读取1000M/s以上的所以就没有测试实际效果了。什么东西？","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]},{"title":"在运行Windows Server 2012 R2 (带GUI)的服务器上开IIS","url":"/2020/04/enable-iis-on-ws-12r2/","content":"\n上次，写了Win10开服务器之后，好像有人真的买了一个服务器来开~~有个屁~~。\n考虑到服务器提供商一般不会提供Windows10安装，所以做了一期Server 2012 R2的。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/86c926f7d2b527373d23fbee32f7c46af4ce4b37.png@1320w_702h.jpg)\n\n我为了做这期专栏还重置了一边服务器(懒得下镜像)…\n\n> 注意\n> **Win Server GUI服务器一般1GB内存妥妥的（不跑特殊任务的话），512MB可能吃紧，爆掉倒不会，就是超出部分都塞到虚拟内存里了，注意别关虚拟内存了。**\n\n啊啊啊，给个三连吧博客你给个寂寞呢？打钱还差不多（逃）\n\n首先，我们得登陆服务器，RDP或者VNC。\n\n* * *\n\n1.打开服务器管理器，这个一般都固定在任务栏\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/4f2f0a88c6c7804525cf6507384d6e6aaa89c85d.png@792w_404h.jpg)\n\n2.单击\"添加角色或功能\"\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/678c71a812820191dd1dd3e06836fa7691fc88d8.png@1320w_702h.jpg)\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/5507340017df221192b2b0ffcf3d77568a419d3c.png@1320w_468h.jpg)\n\n一直下一步(N)\n\n3.勾选\"Web服务器(IIS)\"，然后会弹出确认对话框，点击确认\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/fefb4ac5f8ca924e1de1964a0837c41a84ec5c67.png@1320w_774h.jpg)\n\n记得勾选\"包括管理工具\"\n\n4.选择\"IIS可承载的Web核心\"，然后下一步\\*2\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/fcfc2fc30b55bc7924e56553122d7225c71312e0.png@1320w_940h.jpg)\n\n5.根据需求选择需要的功能，然后下一步\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200414/d4558455e551a9c31e8e25219309f22b61080f92.png@1320w_938h.jpg)\n\n6.确认无误后，点击安装\n\n其实之后的配置就是和Win10的配置差不多了，把东西塞到C:\\\\inetpub\\\\wwwroot下就可以了。\n然后访问服务器IP就可以看到你的页面了。\n\n> 注意\n> **有些服务器提供商为了安全，某些端口(一般22，3389，80默认开放)需要自己开放，在安全组内开放即可，这里就不做一一解释了**\n\n顺带一提：BiliBili上我也发了：[https://www.bilibili.com/read/cv560489](https://www.bilibili.com/read/cv5604892)","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]},{"title":"怎么自己简单地搭建一个的博客","url":"/2020/04/how-to-build-a-blog-simply/","content":"\n我是一个个人博客搭建者，自己搭了一个平时没什么人去的小网站。\n\n如果是匿名用户，我是不太推荐用国内提供商的，国内提供商5Mbps就得几百一个月，而且如果不备案，只能IP访问，只能挂第三方备案过的域名，我是穷学生真的用不起，我妈也不给我身份证。\n\n所以这边建议Vultr，2.5$挡 PacificRack的新春促销(~~PR什么寄~~)，至于如何开的这种问题可以上百度/必应搜。\n\n虽然1020GB的磁盘看起来不太够用，但是如果不是把网站做成离线下载啥的一般都是够用的。（我放了一个MC服务器，加了几十个插件，都没啥事，9.5GB左右）（MC不开了+现在内存不太够，如果有意象整MySQL的就最好上1GB）  \n开服务器是很简单的，重要的不在服务器而在于内容，我搭建博客是找乐子，顺便学习HTML和ASP（ASP是啥垃圾玩意儿，ASP.NET才好（逃））。  \n前面水了这么多，那就正式讲了：  \n\\*\\*这边讲的是自己搭建（总不会买一个服务器也不会吧），基于Windows10，Windows Server系列可能会有所不同，针对中国电信/联通宽带用户，移动就不用想了，没公网IP，你还得用内网穿透或者上专线现在可以用IPv6。\n\n1.打开**控制面板**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200410/6cd3fab94e34c00fdee16a7d818405c960ca85c5.png@1320w_1308h.jpg)\n\n1.打开控制面板\n\n2.进入**程序和功能**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200410/4e6cd9e427c875da72b1c8e55784361be1f83560.png@1320w_996h.jpg)\n\n2.进入程序和功能\n\n3.进入**启用或关闭Windows功能**\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200410/5752ac07026b314a8203bb7bcc277e2a64bd0bb1.png@1320w_996h.jpg)\n\n进入启用或关闭Windows功能\n\n4.Web核心必选，Internet Information Service内的项目可以看需求勾选\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200410/4c8b745e4a6f1bd0f17c4ae25d8b4b230862ec75.png@1246w_1180h.jpg)\n\n选择需要的功能\n\n记得IIS管理工具除了IIS6兼容性其他都得钩，不然后面配置其他东西很麻烦。  \n完成之后点击确定。  \n在功能配置完全之后，你访问127.0.0.1或者localhost都可以访问到这样一个页面\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/img/initial.jpg)\n\n默认页面\n\n这时候你来到`C:\\inetpub\\wwwroot`会有几个文件，这些是默认页面，都可以自行删除，然后放自己的页面进去。\n\n* * *\n\n  \n其实基本到这里就结束了，静态页面也没什么问题了，不过如果要用动态页面（若无特殊说明，以下均指ASP页面）的话（比如意见反馈等等）还要配置一下。  \n\\*\\*值得注意的是：如果需要动态页面支持，则需要在配置功能的页面勾选 “开发工具” 复选框。\n\n打开IIS管理控制台\n\n依次进入\"IIS\"选项卡\n\n在IIS选项卡内，将几个被框住的部分改为True，点击右侧的\"应用\"\n\n> 注意  \n> **值得注意的是，有时候访问ASP页面会出现503/403错误，这个时候应该是缺少权限 所导致，我们需要给Everyone赋予读取和执行权限。**\n\n写在最后：可能会有人问我，为什么不用PhP和PhP Study(这俩都不是一个东西好伐)，因为我真的好像看不懂PhP的一堆问号，而且也懒\\[手动狗头\\](我看你现在不是用的挺开心嘛)。  \n而PhP Study好像不支持ASP（怎么可能支持嘛），如果你是PhP大佬，你大可以选择其他的，我只是一个建站半年的新手。\n\n↑大 废 话\n\n顺带一提：BiliBili上我也发了：[https://www.bilibili.com/read/cv5542828](https://www.bilibili.com/read/cv5542828)","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]},{"title":"前Blog发展历程","url":"/2020/04/development-of-my-previous-blog/","content":"\n曾经，我的Blog是在学校自己写的（）\n\n那时，我的HTML功底很差，排版很简陋，只能写一些简单的流式段落。(应该是这么叫的……吧？)\n\n在一开始的时候，我的页面全是各种`<p align=\"center\"></p>` 。嘛，后来我看了一下IIS的初始页面，认识了CSS，然后加了text-align，把所有的`<p>`都换成了`<br>`\n\n老的Index↓\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200401/oldIndex.jpg)\n\n嘛，大概长这样(怀旧一波)↑\n\n其实也不算是一个Blog，倒是有点像商业网站 （还长得贼丑）\n\n后来呢，一个名叫qwe的网友给了我一个随机壁纸的js，然后我开了他的js，把所有壁纸连着js一起下载下来了，然后...，把我IP给ban了，现在想来如果去掉HTTP请求refer应该能跨过这个block（大雾）（这是今天刚加的），到现在我都上不去。\n\n然后呢，我页面一多起来，我的下方版权信息和顶部导航栏（对，就是那个黑黑的憨憨导航栏）写起来就很麻烦，在研究怎么批量引入版权信息，那些icon和css引用，上网查了好多资料。最后呢因为上边的Js事件我明白了可以直接`document.write`批量写入 。（注：现在都是`document.createElement`了）\n\n最近吧，某个DrBlack群(以下简称黑群)的群友让我挂了个网页（对，就是那个Windows Touko，整个页面都是我写的，耗了我一个早上）。 于是\n\n我寻思着得改一下UI了，WordPress要注册，Typecho要PHP环境(你现在也用WP/PHP啊喂)，所以就又花了半天去写了个新的UI，就是现在那个CaoCho，你也可以称为CaoPress。后来我又陆陆续续加了一个Live2D看板娘，一个播放器(感谢LRain大佬)。 然后大概就变成现在的样子了。\n\n![](https://cdn.jsdelivr.net/gh/Yuameshi/blog-old@master/passages/20200401/nowadays.jpg)\n\n现在的样子（样子奇葩的很）","tags":["迁移自旧Blog"],"categories":["迁移自旧Blog"]}]